name: CI
on:
  push:
    branches:
      - main
    tags-ignore:
      - 'release'

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia
      - uses: leafo/gh-actions-lua@v8.0.0
        with:
          luaVersion: '5.2'
      - uses: leafo/gh-actions-luarocks@v4.0.0
      - run: |
          luarocks install luafilesystem
          luarocks install argparse
      - uses: actions/checkout@v3
        with:
          repository: LiliaFramework/GluaCheck
          path: luacheck
      - run: |
          cd luacheck
          luarocks make
      - run: |
          cd lilia
          luacheck . \
            --no-redefined \
            --no-global --no-self \
            --no-max-line-length --no-max-code-line-length \
            --no-max-string-line-length --no-max-comment-line-length \
            --no-max-cyclomatic-complexity

  release:
    needs: linter
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.compute_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Compute semantic version
        id: compute_version
        run: |
          cd lilia
          VALID_COUNT=0
          for C in $(git rev-list --reverse HEAD); do
            A=$(git show -s --format='%ae' $C)
            P=$(git rev-list --parents -n 1 $C | wc -w)
            if [[ "$A" != "github-actions@github.com" && "$P" -lt 3 ]]; then
              VALID_COUNT=$((VALID_COUNT + 1))
            fi
          done
          MAJOR=$((VALID_COUNT / 1000))
          MINOR=$(((VALID_COUNT % 1000) / 100))
          PATCH=$((VALID_COUNT % 100))
          VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Inject version into shared.lua
        run: |
          python3 - << 'PY'
          import os, re, io, sys
          version = os.environ["VERSION"]
          path = 'lilia/gamemode/shared.lua'
          with io.open(path, encoding='utf-8-sig') as f:
              lines = f.readlines()
          pattern = re.compile(r'\ufeff?\s*GM\.Name\s*=')
          out, inserted = [], False
          for line in lines:
              out.append(line)
              if not inserted and pattern.match(line):
                  out.append(f'GM.version = "{version}"\n')
                  inserted = True
          if not inserted:
              sys.exit('GM.Name not found')
          with io.open(path, 'w', encoding='utf-8') as f:
              f.writelines(out)
          PY

      - name: Commit version bump
        run: |
          cd lilia
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add gamemode/shared.lua
          git diff-index --quiet HEAD || git commit -m "ci: bump GM.version to ${{ needs.release.outputs.version }}"
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}

      - uses: actions/github-script@v6
        with:
          script: |
            const tag = 'release'
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              })
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: rel.data.id
              })
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`
              })
            } catch (error) {
              if (error.status !== 404) throw error
            }

      - name: Package and zip
        run: |
          mkdir packaged
          cp -R lilia packaged/lilia
          cd packaged
          zip -r ../lilia.zip lilia

      - id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: release
          release_name: Lilia
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}

      - uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: lilia.zip
          asset_name: lilia.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}

  deploy-pages:
    needs: release
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.release.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/checkout@v3
        with:
          repository: LiliaFramework/LiliaFramework.github.io
          path: site
          token: ${{ secrets.LiliaGitSecret }}

      - name: Compute docs version.json
        run: |
          cd lilia
          VALID_COUNT=0
          for C in $(git rev-list --reverse HEAD); do
            A=$(git show -s --format='%ae' $C)
            P=$(git rev-list --parents -n 1 $C | wc -w)
            if [[ "$A" != "github-actions@github.com" && "$A" != "github-actions[bot]@users.noreply.github.com" && "$P" -lt 3 ]]; then
              VALID_COUNT=$((VALID_COUNT + 1))
            fi
          done
          mkdir -p docs
          cat > docs/version.json <<EOF
          {
            "version": "$VERSION",
            "commitCount": $VALID_COUNT,
            "commitHash": "$(git rev-parse --short HEAD)",
            "branch": "main"
          }
          EOF

      - run: cp lilia/docs/version.json site/version.json

      - name: Publish site version
        run: |
          cd site
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          if ! git diff --quiet; then
            git add version.json
            git commit -m "Update version.json"
            git push origin HEAD
          fi